// This file was generated by a T4 template.
// Don't change it directly as your change would get overwritten.  Instead, make changes
// to the .tt file (i.e. the T4 template) and save it to regenerate this file.

#region T4MVC

using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Web;
using System.Web.Mvc;
using System.Web.Mvc.Ajax;
using System.Web.Mvc.Html;
using System.Web.Routing;
using T4MVC;

[CompilerGenerated]
public static class MVC {
    public static MvcApplication1.Controllers.AccountController Account = new T4MVC_AccountController();
    public static MvcApplication1.Controllers.HomeController Home = new T4MVC_HomeController();
    public static lunchhunters.Controllers.LocationController Location = new T4MVC_LocationController();
    public static SampleWebsite.Controllers.UserAdministrationController UserAdministration = new T4MVC_UserAdministrationController();
    public static T4MVC.SharedController Shared = new T4MVC.SharedController();
}


namespace MvcApplication1.Controllers {
    public partial class AccountController {

        [CompilerGenerated]
        protected AccountController(_Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }


        [CompilerGenerated]
        public readonly string Name = "Account";

        static readonly _Actions s_actions = new _Actions();
        [CompilerGenerated]
        public _Actions Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class _Actions {
            public readonly string LogOn = "LogOn";
            public readonly string LogOff = "LogOff";
            public readonly string Register = "Register";
            public readonly string ChangePassword = "ChangePassword";
            public readonly string ChangePasswordSuccess = "ChangePasswordSuccess";
        }

        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
            public readonly string ChangePassword = "ChangePassword";
            public readonly string ChangePasswordSuccess = "ChangePasswordSuccess";
            public readonly string LogOn = "LogOn";
            public readonly string Register = "Register";
        }
    }
}
namespace MvcApplication1.Controllers {
    public partial class HomeController {

        public HomeController() { }

        [CompilerGenerated]
        protected HomeController(_Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }


        [CompilerGenerated]
        public readonly string Name = "Home";

        static readonly _Actions s_actions = new _Actions();
        [CompilerGenerated]
        public _Actions Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class _Actions {
            public readonly string Index = "Index";
            public readonly string About = "About";
        }

        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
            public readonly string About = "About";
            public readonly string Index = "Index";
        }
    }
}
namespace lunchhunters.Controllers {
    public partial class LocationController {

        [CompilerGenerated]
        protected LocationController(_Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public ActionResult Index() {
            return new T4MVC_ActionResult(Name, Actions.Index);
        }

        [NonAction]
        public ActionResult Details() {
            return new T4MVC_ActionResult(Name, Actions.Details);
        }

        [NonAction]
        public ActionResult Save() {
            return new T4MVC_ActionResult(Name, Actions.Save);
        }

        [NonAction]
        public ActionResult Delete() {
            return new T4MVC_ActionResult(Name, Actions.Delete);
        }


        [CompilerGenerated]
        public readonly string Name = "Location";

        static readonly _Actions s_actions = new _Actions();
        [CompilerGenerated]
        public _Actions Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class _Actions {
            public readonly string Index = "Index";
            public readonly string Details = "Details";
            public readonly string Create = "Create";
            public readonly string Save = "Save";
            public readonly string Delete = "Delete";
        }

        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
            public readonly string Create = "Create";
            public readonly string Details = "Details";
            public readonly string Edit = "Edit";
            public readonly string Index = "Index";
        }
    }
}
namespace SampleWebsite.Controllers {
    public partial class UserAdministrationController {

        [CompilerGenerated]
        protected UserAdministrationController(_Dummy d) { }

        protected RedirectToRouteResult RedirectToAction(ActionResult result) {
            var callInfo = (IT4MVCActionResult)result;
            return RedirectToRoute(callInfo.RouteValues);
        }

        [NonAction]
        public ActionResult Index() {
            return new T4MVC_ActionResult(Name, Actions.Index);
        }

        [NonAction]
        public ActionResult CreateRole() {
            return new T4MVC_ActionResult(Name, Actions.CreateRole);
        }

        [NonAction]
        public ActionResult DeleteRole() {
            return new T4MVC_ActionResult(Name, Actions.DeleteRole);
        }

        [NonAction]
        public ActionResult Role() {
            return new T4MVC_ActionResult(Name, Actions.Role);
        }

        [NonAction]
        public ActionResult Details() {
            return new T4MVC_ActionResult(Name, Actions.Details);
        }

        [NonAction]
        public ActionResult DeleteUser() {
            return new T4MVC_ActionResult(Name, Actions.DeleteUser);
        }

        [NonAction]
        public ActionResult ChangeApproval() {
            return new T4MVC_ActionResult(Name, Actions.ChangeApproval);
        }

        [NonAction]
        public ActionResult Unlock() {
            return new T4MVC_ActionResult(Name, Actions.Unlock);
        }

        [NonAction]
        public ActionResult ResetPassword() {
            return new T4MVC_ActionResult(Name, Actions.ResetPassword);
        }

        [NonAction]
        public ActionResult AddToRole() {
            return new T4MVC_ActionResult(Name, Actions.AddToRole);
        }

        [NonAction]
        public ActionResult RemoveFromRole() {
            return new T4MVC_ActionResult(Name, Actions.RemoveFromRole);
        }


        [CompilerGenerated]
        public readonly string Name = "UserAdministration";

        static readonly _Actions s_actions = new _Actions();
        [CompilerGenerated]
        public _Actions Actions { get { return s_actions; } }
        [CompilerGenerated]
        public class _Actions {
            public readonly string Index = "Index";
            public readonly string CreateRole = "CreateRole";
            public readonly string DeleteRole = "DeleteRole";
            public readonly string Role = "Role";
            public readonly string Details = "Details";
            public readonly string DeleteUser = "DeleteUser";
            public readonly string ChangeApproval = "ChangeApproval";
            public readonly string Unlock = "Unlock";
            public readonly string ResetPassword = "ResetPassword";
            public readonly string AddToRole = "AddToRole";
            public readonly string RemoveFromRole = "RemoveFromRole";
        }

        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
            public readonly string Details = "Details";
            public readonly string Index = "Index";
            public readonly string Role = "Role";
        }
    }
}
namespace T4MVC {
    public class SharedController {


        static readonly _Views s_views = new _Views();
        [CompilerGenerated]
        public _Views Views { get { return s_views; } }
        [CompilerGenerated]
        public class _Views {
            public readonly string Error = "Error";
            public readonly string LogOnUserControl = "LogOnUserControl";
        }
    }
}

namespace T4MVC {
    [CompilerGenerated]
    public class T4MVC_AccountController: MvcApplication1.Controllers.AccountController {
        public T4MVC_AccountController() : base(_Dummy.Instance) { }

        public override ActionResult LogOn() {
            var callInfo = new T4MVC_ActionResult("Account", Actions.LogOn);
            return callInfo;
        }

        public override ActionResult LogOn(string userName, string password, bool rememberMe, string returnUrl) {
            var callInfo = new T4MVC_ActionResult("Account", Actions.LogOn);
            callInfo.RouteValues.Add("userName", userName);
            callInfo.RouteValues.Add("password", password);
            callInfo.RouteValues.Add("rememberMe", rememberMe);
            callInfo.RouteValues.Add("returnUrl", returnUrl);
            return callInfo;
        }

        public override ActionResult LogOff() {
            var callInfo = new T4MVC_ActionResult("Account", Actions.LogOff);
            return callInfo;
        }

        public override ActionResult Register() {
            var callInfo = new T4MVC_ActionResult("Account", Actions.Register);
            return callInfo;
        }

        public override ActionResult Register(string userName, string email, string password, string confirmPassword) {
            var callInfo = new T4MVC_ActionResult("Account", Actions.Register);
            callInfo.RouteValues.Add("userName", userName);
            callInfo.RouteValues.Add("email", email);
            callInfo.RouteValues.Add("password", password);
            callInfo.RouteValues.Add("confirmPassword", confirmPassword);
            return callInfo;
        }

        public override ActionResult ChangePassword() {
            var callInfo = new T4MVC_ActionResult("Account", Actions.ChangePassword);
            return callInfo;
        }

        public override ActionResult ChangePassword(string currentPassword, string newPassword, string confirmPassword) {
            var callInfo = new T4MVC_ActionResult("Account", Actions.ChangePassword);
            callInfo.RouteValues.Add("currentPassword", currentPassword);
            callInfo.RouteValues.Add("newPassword", newPassword);
            callInfo.RouteValues.Add("confirmPassword", confirmPassword);
            return callInfo;
        }

        public override ActionResult ChangePasswordSuccess() {
            var callInfo = new T4MVC_ActionResult("Account", Actions.ChangePasswordSuccess);
            return callInfo;
        }

    }
    [CompilerGenerated]
    public class T4MVC_HomeController: MvcApplication1.Controllers.HomeController {
        public T4MVC_HomeController() : base(_Dummy.Instance) { }

        public override ActionResult Index() {
            var callInfo = new T4MVC_ActionResult("Home", Actions.Index);
            return callInfo;
        }

        public override ActionResult About() {
            var callInfo = new T4MVC_ActionResult("Home", Actions.About);
            return callInfo;
        }

    }
    [CompilerGenerated]
    public class T4MVC_LocationController: lunchhunters.Controllers.LocationController {
        public T4MVC_LocationController() : base(_Dummy.Instance) { }

        public override ActionResult Index(int? size, string partition, string row) {
            var callInfo = new T4MVC_ActionResult("Location", Actions.Index);
            callInfo.RouteValues.Add("size", size);
            callInfo.RouteValues.Add("partition", partition);
            callInfo.RouteValues.Add("row", row);
            return callInfo;
        }

        public override ActionResult Details(System.Guid id, bool editing) {
            var callInfo = new T4MVC_ActionResult("Location", Actions.Details);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("editing", editing);
            return callInfo;
        }

        public override ActionResult Create() {
            var callInfo = new T4MVC_ActionResult("Location", Actions.Create);
            return callInfo;
        }

        public override ActionResult Save(System.Guid id) {
            var callInfo = new T4MVC_ActionResult("Location", Actions.Save);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override ActionResult Delete(System.Guid id) {
            var callInfo = new T4MVC_ActionResult("Location", Actions.Delete);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

    }
    [CompilerGenerated]
    public class T4MVC_UserAdministrationController: SampleWebsite.Controllers.UserAdministrationController {
        public T4MVC_UserAdministrationController() : base(_Dummy.Instance) { }

        public override ViewResult Index(int? index) {
            var callInfo = new T4MVC_ViewResult("UserAdministration", Actions.Index);
            callInfo.RouteValues.Add("index", index);
            return callInfo;
        }

        public override RedirectToRouteResult CreateRole(string id) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.CreateRole);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override RedirectToRouteResult DeleteRole(string id) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.DeleteRole);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override ViewResult Role(string id) {
            var callInfo = new T4MVC_ViewResult("UserAdministration", Actions.Role);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override ViewResult Details(System.Guid id) {
            var callInfo = new T4MVC_ViewResult("UserAdministration", Actions.Details);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override RedirectToRouteResult Details(System.Guid id, string email, string comment) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.Details);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("email", email);
            callInfo.RouteValues.Add("comment", comment);
            return callInfo;
        }

        public override RedirectToRouteResult DeleteUser(System.Guid id) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.DeleteUser);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override RedirectToRouteResult ChangeApproval(System.Guid id, bool isApproved) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.ChangeApproval);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("isApproved", isApproved);
            return callInfo;
        }

        public override RedirectToRouteResult Unlock(System.Guid id) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.Unlock);
            callInfo.RouteValues.Add("id", id);
            return callInfo;
        }

        public override RedirectToRouteResult ResetPassword(System.Guid id, string answer) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.ResetPassword);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("answer", answer);
            return callInfo;
        }

        public override RedirectToRouteResult AddToRole(System.Guid id, string role) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.AddToRole);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("role", role);
            return callInfo;
        }

        public override RedirectToRouteResult RemoveFromRole(System.Guid id, string role) {
            var callInfo = new T4MVC_RedirectToRouteResult("UserAdministration", Actions.RemoveFromRole);
            callInfo.RouteValues.Add("id", id);
            callInfo.RouteValues.Add("role", role);
            return callInfo;
        }

    }

    [CompilerGenerated]
    public class _Dummy {
        private _Dummy() { }
        public static _Dummy Instance = new _Dummy();
    }
}

namespace System.Web.Mvc {
    [CompilerGenerated]
    public static class T4Extensions {
        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary());
        }

        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, object htmlAttributes) {
            return ActionLink(htmlHelper, linkText, result, new RouteValueDictionary(htmlAttributes));
        }

        public static string ActionLink(this HtmlHelper htmlHelper, string linkText, ActionResult result, IDictionary<string, object> htmlAttributes) {
            return htmlHelper.RouteLink(linkText, result.GetRouteValueDictionary(), htmlAttributes);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod) {
            return htmlHelper.BeginForm(result, formMethod, null);
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, object htmlAttributes) {
            return BeginForm(htmlHelper, result, formMethod, new RouteValueDictionary(htmlAttributes));
        }

        public static MvcForm BeginForm(this HtmlHelper htmlHelper, ActionResult result, FormMethod formMethod, IDictionary<string, object> htmlAttributes) {
            var callInfo = (IT4MVCActionResult)result;
            return htmlHelper.BeginForm(callInfo.Action, callInfo.Controller, callInfo.RouteValues, formMethod, htmlAttributes);
        }

        public static string Action(this UrlHelper urlHelper, ActionResult result) {
            return urlHelper.RouteUrl(result.GetRouteValueDictionary());
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions);
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, object htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, new RouteValueDictionary(htmlAttributes));
        }

        public static string ActionLink(this AjaxHelper ajaxHelper, string linkText, ActionResult result, AjaxOptions ajaxOptions, IDictionary<string, object> htmlAttributes) {
            return ajaxHelper.RouteLink(linkText, result.GetRouteValueDictionary(), ajaxOptions, htmlAttributes);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result) {
            return routes.MapRoute(name, url, result, (ActionResult)null);
        }

        public static Route MapRoute(this RouteCollection routes, string name, string url, ActionResult result, object defaults) {
            // Start by adding the default values from the anonymous object (if any)
            var routeValues = new RouteValueDictionary(defaults);

            // Then add the Controller/Action names and the parameters from the call
            foreach (var pair in result.GetRouteValueDictionary()) {
                routeValues.Add(pair.Key, pair.Value);
            }

            // Create and add the route
            var route = new Route(url, routeValues, new MvcRouteHandler());
            routes.Add(name, route);
            return route;
        }

        public static RouteValueDictionary GetRouteValueDictionary(this ActionResult result) {
            return ((IT4MVCActionResult)result).RouteValues;
        }

        public static void InitMVCT4Result(this IT4MVCActionResult result, string controller, string action) {
            result.Controller = controller;
            result.Action = action; ;
            result.RouteValues = new RouteValueDictionary();
            result.RouteValues.Add("Controller", controller);
            result.RouteValues.Add("Action", action);
        }
    }
}

[CompilerGenerated]
public interface IT4MVCActionResult {
    string Action { get; set; }
    string Controller { get; set; }
    RouteValueDictionary RouteValues { get; set; }
}

[CompilerGenerated]
public class T4MVC_ActionResult : ActionResult, IT4MVCActionResult {
    public T4MVC_ActionResult(string controller, string action): base()  {
        this.InitMVCT4Result(controller, action);
    }
     
    public override void ExecuteResult(System.Web.Mvc.ControllerContext context) { }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}

[CompilerGenerated]
public class T4MVC_ViewResult : ViewResult, IT4MVCActionResult {
    public T4MVC_ViewResult(string controller, string action): base()  {
        this.InitMVCT4Result(controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}

[CompilerGenerated]
public class T4MVC_RedirectToRouteResult : RedirectToRouteResult, IT4MVCActionResult {
    public T4MVC_RedirectToRouteResult(string controller, string action): base(" ", null)  {
        this.InitMVCT4Result(controller, action);
    }
    
    public string Controller { get; set; }
    public string Action { get; set; }
    public RouteValueDictionary RouteValues { get; set; }
}


namespace Links {
    [CompilerGenerated]
    public static class @Scripts {
        public static string Url() { return VirtualPathUtility.ToAbsolute("~/Scripts"); }
        public static string Url(string fileName) { return VirtualPathUtility.ToAbsolute("~/Scripts/" + fileName); }
        [CompilerGenerated]
        public static class @ExtJS {
            public static string Url() { return VirtualPathUtility.ToAbsolute("~/Scripts/ExtJS"); }
            public static string Url(string fileName) { return VirtualPathUtility.ToAbsolute("~/Scripts/ExtJS/" + fileName); }
            public static readonly string cmp_foundation_debug_js = Url("cmp-foundation-debug.js");
            public static readonly string cmp_foundation_js = Url("cmp-foundation.js");
            public static readonly string data_foundation_debug_js = Url("data-foundation-debug.js");
            public static readonly string data_foundation_js = Url("data-foundation.js");
            public static readonly string data_grouping_debug_js = Url("data-grouping-debug.js");
            public static readonly string data_grouping_js = Url("data-grouping.js");
            public static readonly string data_json_debug_js = Url("data-json-debug.js");
            public static readonly string data_json_js = Url("data-json.js");
            public static readonly string data_list_views_debug_js = Url("data-list-views-debug.js");
            public static readonly string data_list_views_js = Url("data-list-views.js");
            public static readonly string data_xml_debug_js = Url("data-xml-debug.js");
            public static readonly string data_xml_js = Url("data-xml.js");
            public static readonly string direct_debug_js = Url("direct-debug.js");
            public static readonly string direct_js = Url("direct.js");
            public static readonly string ext_dd_debug_js = Url("ext-dd-debug.js");
            public static readonly string ext_dd_js = Url("ext-dd.js");
            public static readonly string ext_foundation_debug_js = Url("ext-foundation-debug.js");
            public static readonly string ext_foundation_js = Url("ext-foundation.js");
            public static readonly string ext_jquery_adapter_debug_js = Url("ext-jquery-adapter-debug.js");
            public static readonly string ext_jquery_adapter_js = Url("ext-jquery-adapter.js");
            public static readonly string pkg_buttons_debug_js = Url("pkg-buttons-debug.js");
            public static readonly string pkg_buttons_js = Url("pkg-buttons.js");
            public static readonly string pkg_charts_debug_js = Url("pkg-charts-debug.js");
            public static readonly string pkg_charts_js = Url("pkg-charts.js");
            public static readonly string pkg_forms_debug_js = Url("pkg-forms-debug.js");
            public static readonly string pkg_forms_js = Url("pkg-forms.js");
            public static readonly string pkg_grid_editor_debug_js = Url("pkg-grid-editor-debug.js");
            public static readonly string pkg_grid_editor_js = Url("pkg-grid-editor.js");
            public static readonly string pkg_grid_foundation_debug_js = Url("pkg-grid-foundation-debug.js");
            public static readonly string pkg_grid_foundation_js = Url("pkg-grid-foundation.js");
            public static readonly string pkg_grid_grouping_debug_js = Url("pkg-grid-grouping-debug.js");
            public static readonly string pkg_grid_grouping_js = Url("pkg-grid-grouping.js");
            public static readonly string pkg_grid_property_debug_js = Url("pkg-grid-property-debug.js");
            public static readonly string pkg_grid_property_js = Url("pkg-grid-property.js");
            public static readonly string pkg_history_debug_js = Url("pkg-history-debug.js");
            public static readonly string pkg_history_js = Url("pkg-history.js");
            public static readonly string pkg_menu_debug_js = Url("pkg-menu-debug.js");
            public static readonly string pkg_menu_js = Url("pkg-menu.js");
            public static readonly string pkg_tabs_debug_js = Url("pkg-tabs-debug.js");
            public static readonly string pkg_tabs_js = Url("pkg-tabs.js");
            public static readonly string pkg_tips_debug_js = Url("pkg-tips-debug.js");
            public static readonly string pkg_tips_js = Url("pkg-tips.js");
            public static readonly string pkg_toolbars_debug_js = Url("pkg-toolbars-debug.js");
            public static readonly string pkg_toolbars_js = Url("pkg-toolbars.js");
            public static readonly string pkg_tree_debug_js = Url("pkg-tree-debug.js");
            public static readonly string pkg_tree_js = Url("pkg-tree.js");
            public static readonly string resizable_debug_js = Url("resizable-debug.js");
            public static readonly string resizable_js = Url("resizable.js");
            public static readonly string state_debug_js = Url("state-debug.js");
            public static readonly string state_js = Url("state.js");
            public static readonly string window_debug_js = Url("window-debug.js");
            public static readonly string window_js = Url("window.js");
        }
    
        public static readonly string jquery_1_3_2_vsdoc_js = Url("jquery-1.3.2-vsdoc.js");
        public static readonly string jquery_1_3_2_js = Url("jquery-1.3.2.js");
        public static readonly string jquery_1_3_2_min_vsdoc_js = Url("jquery-1.3.2.min-vsdoc.js");
        public static readonly string jquery_1_3_2_min_js = Url("jquery-1.3.2.min.js");
        public static readonly string menu_js = Url("menu.js");
        public static readonly string MicrosoftAjax_debug_js = Url("MicrosoftAjax.debug.js");
        public static readonly string MicrosoftAjax_js = Url("MicrosoftAjax.js");
        public static readonly string MicrosoftMvcAjax_debug_js = Url("MicrosoftMvcAjax.debug.js");
        public static readonly string MicrosoftMvcAjax_js = Url("MicrosoftMvcAjax.js");
        [CompilerGenerated]
        public static class @ScriptSharp {
            public static string Url() { return VirtualPathUtility.ToAbsolute("~/Scripts/ScriptSharp"); }
            public static string Url(string fileName) { return VirtualPathUtility.ToAbsolute("~/Scripts/ScriptSharp/" + fileName); }
            public static readonly string lunchhunters_Scripts_debug_js = Url("lunchhunters.Scripts.debug.js");
            public static readonly string sscorlib_debug_js = Url("sscorlib.debug.js");
            public static readonly string sscorlib_js = Url("sscorlib.js");
            public static readonly string ssfx_Core_debug_js = Url("ssfx.Core.debug.js");
            public static readonly string ssfx_Core_js = Url("ssfx.Core.js");
            public static readonly string ssfx_UI_Forms_debug_js = Url("ssfx.UI.Forms.debug.js");
            public static readonly string ssfx_UI_Forms_js = Url("ssfx.UI.Forms.js");
        }
    
    }

    [CompilerGenerated]
    public static class @Content {
        public static string Url() { return VirtualPathUtility.ToAbsolute("~/Content"); }
        public static string Url(string fileName) { return VirtualPathUtility.ToAbsolute("~/Content/" + fileName); }
        [CompilerGenerated]
        public static class @images {
            public static string Url() { return VirtualPathUtility.ToAbsolute("~/Content/images"); }
            public static string Url(string fileName) { return VirtualPathUtility.ToAbsolute("~/Content/images/" + fileName); }
            public static readonly string ad_gif = Url("ad.gif");
            public static readonly string bg_button_png = Url("bg-button.png");
            public static readonly string bg_column_left_png = Url("bg-column-left.png");
            public static readonly string bg_column_right_png = Url("bg-column-right.png");
            public static readonly string bg_input_png = Url("bg-input.png");
            public static readonly string bg_poster_photo_jpg = Url("bg-poster-photo.jpg");
            public static readonly string bg_poster_tile_jpg = Url("bg-poster-tile.jpg");
            public static readonly string bg_poster_jpg = Url("bg-poster.jpg");
            public static readonly string bg_gif = Url("bg.gif");
            public static readonly string bullet_png = Url("bullet.png");
            public static readonly string favicon_ico = Url("favicon.ico");
            public static readonly string photo_small_01_jpg = Url("photo-small-01.jpg");
            public static readonly string photo_small_02_jpg = Url("photo-small-02.jpg");
        }
    
        public static readonly string menu_css = Url("menu.css");
        [CompilerGenerated]
        public static class @MvcMembership {
            public static string Url() { return VirtualPathUtility.ToAbsolute("~/Content/MvcMembership"); }
            public static string Url(string fileName) { return VirtualPathUtility.ToAbsolute("~/Content/MvcMembership/" + fileName); }
            public static readonly string MvcMembership_css = Url("MvcMembership.css");
        }
    
        public static readonly string print_styles_css = Url("print-styles.css");
        public static readonly string Site_css = Url("Site.css");
    }

}

#endregion T4MVC

